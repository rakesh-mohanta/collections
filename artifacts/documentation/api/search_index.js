var search_data = {
    'index': {
        'searchIndex': ["icecave","icecave\\collections","icecave\\collections\\exception","icecave\\collections\\iterator","icecave\\collections\\utility","icecave\\collections\\associativeinterface","icecave\\collections\\collection","icecave\\collections\\collectioninterface","icecave\\collections\\exception\\collectionexceptioninterface","icecave\\collections\\exception\\duplicatekeyexception","icecave\\collections\\exception\\emptycollectionexception","icecave\\collections\\exception\\indexexception","icecave\\collections\\exception\\unknownkeyexception","icecave\\collections\\hashmap","icecave\\collections\\hashset","icecave\\collections\\iterableinterface","icecave\\collections\\iterator\\associativeiterator","icecave\\collections\\iterator\\randomaccessiterator","icecave\\collections\\iterator\\sequentialkeyiterator","icecave\\collections\\iterator\\traits","icecave\\collections\\iterator\\traitsproviderinterface","icecave\\collections\\linkedlist","icecave\\collections\\map","icecave\\collections\\mutableassociativeinterface","icecave\\collections\\mutablecollectioninterface","icecave\\collections\\mutableiterableinterface","icecave\\collections\\mutablerandomaccessinterface","icecave\\collections\\mutablesequenceinterface","icecave\\collections\\priorityqueue","icecave\\collections\\queue","icecave\\collections\\queuedaccessinterface","icecave\\collections\\randomaccessinterface","icecave\\collections\\sequenceinterface","icecave\\collections\\set","icecave\\collections\\setinterface","icecave\\collections\\stack","icecave\\collections\\utility\\associativekeygenerator","icecave\\collections\\utility\\objectidentitycomparator","icecave\\collections\\vector","icecave\\collections\\associativeinterface::haskey","icecave\\collections\\associativeinterface::get","icecave\\collections\\associativeinterface::tryget","icecave\\collections\\associativeinterface::getwithdefault","icecave\\collections\\associativeinterface::cascade","icecave\\collections\\associativeinterface::cascadewithdefault","icecave\\collections\\associativeinterface::cascadeiterable","icecave\\collections\\associativeinterface::cascadeiterablewithdefault","icecave\\collections\\associativeinterface::keys","icecave\\collections\\associativeinterface::values","icecave\\collections\\associativeinterface::merge","icecave\\collections\\associativeinterface::project","icecave\\collections\\associativeinterface::projectiterable","icecave\\collections\\collection::isempty","icecave\\collections\\collection::size","icecave\\collections\\collection::get","icecave\\collections\\collection::tryget","icecave\\collections\\collection::getwithdefault","icecave\\collections\\collection::haskey","icecave\\collections\\collection::contains","icecave\\collections\\collection::keys","icecave\\collections\\collection::values","icecave\\collections\\collection::elements","icecave\\collections\\collection::map","icecave\\collections\\collection::filter","icecave\\collections\\collection::each","icecave\\collections\\collection::all","icecave\\collections\\collection::any","icecave\\collections\\collection::issequential","icecave\\collections\\collection::getiterator","icecave\\collections\\collection::addelement","icecave\\collections\\collection::addelements","icecave\\collections\\collection::implode","icecave\\collections\\collection::explode","icecave\\collections\\collection::iteratortraits","icecave\\collections\\collection::compare","icecave\\collections\\collection::lowerbound","icecave\\collections\\collection::upperbound","icecave\\collections\\collection::binarysearch","icecave\\collections\\collectioninterface::size","icecave\\collections\\collectioninterface::isempty","icecave\\collections\\collectioninterface::__tostring","icecave\\collections\\exception\\duplicatekeyexception::__construct","icecave\\collections\\exception\\emptycollectionexception::__construct","icecave\\collections\\exception\\indexexception::__construct","icecave\\collections\\exception\\unknownkeyexception::__construct","icecave\\collections\\hashmap::__construct","icecave\\collections\\hashmap::size","icecave\\collections\\hashmap::isempty","icecave\\collections\\hashmap::__tostring","icecave\\collections\\hashmap::clear","icecave\\collections\\hashmap::iteratortraits","icecave\\collections\\hashmap::elements","icecave\\collections\\hashmap::contains","icecave\\collections\\hashmap::filter","icecave\\collections\\hashmap::map","icecave\\collections\\hashmap::partition","icecave\\collections\\hashmap::each","icecave\\collections\\hashmap::all","icecave\\collections\\hashmap::any","icecave\\collections\\hashmap::filterinplace","icecave\\collections\\hashmap::mapinplace","icecave\\collections\\hashmap::haskey","icecave\\collections\\hashmap::get","icecave\\collections\\hashmap::tryget","icecave\\collections\\hashmap::getwithdefault","icecave\\collections\\hashmap::cascade","icecave\\collections\\hashmap::cascadewithdefault","icecave\\collections\\hashmap::cascadeiterable","icecave\\collections\\hashmap::cascadeiterablewithdefault","icecave\\collections\\hashmap::keys","icecave\\collections\\hashmap::values","icecave\\collections\\hashmap::merge","icecave\\collections\\hashmap::project","icecave\\collections\\hashmap::projectiterable","icecave\\collections\\hashmap::set","icecave\\collections\\hashmap::add","icecave\\collections\\hashmap::tryadd","icecave\\collections\\hashmap::replace","icecave\\collections\\hashmap::tryreplace","icecave\\collections\\hashmap::remove","icecave\\collections\\hashmap::tryremove","icecave\\collections\\hashmap::mergeinplace","icecave\\collections\\hashmap::swap","icecave\\collections\\hashmap::tryswap","icecave\\collections\\hashmap::move","icecave\\collections\\hashmap::trymove","icecave\\collections\\hashmap::rename","icecave\\collections\\hashmap::tryrename","icecave\\collections\\hashmap::count","icecave\\collections\\hashmap::current","icecave\\collections\\hashmap::key","icecave\\collections\\hashmap::next","icecave\\collections\\hashmap::rewind","icecave\\collections\\hashmap::valid","icecave\\collections\\hashmap::offsetexists","icecave\\collections\\hashmap::offsetget","icecave\\collections\\hashmap::offsetset","icecave\\collections\\hashmap::offsetunset","icecave\\collections\\hashmap::serialize","icecave\\collections\\hashmap::unserialize","icecave\\collections\\hashmap::compare","icecave\\collections\\hashmap::cancompare","icecave\\collections\\hashmap::isequalto","icecave\\collections\\hashmap::isnotequalto","icecave\\collections\\hashmap::islessthan","icecave\\collections\\hashmap::isgreaterthan","icecave\\collections\\hashmap::islessthanorequalto","icecave\\collections\\hashmap::isgreaterthanorequalto","icecave\\collections\\hashset::__construct","icecave\\collections\\hashset::size","icecave\\collections\\hashset::isempty","icecave\\collections\\hashset::__tostring","icecave\\collections\\hashset::clear","icecave\\collections\\hashset::iteratortraits","icecave\\collections\\hashset::elements","icecave\\collections\\hashset::contains","icecave\\collections\\hashset::filter","icecave\\collections\\hashset::map","icecave\\collections\\hashset::partition","icecave\\collections\\hashset::each","icecave\\collections\\hashset::all","icecave\\collections\\hashset::any","icecave\\collections\\hashset::filterinplace","icecave\\collections\\hashset::mapinplace","icecave\\collections\\hashset::count","icecave\\collections\\hashset::getiterator","icecave\\collections\\hashset::serialize","icecave\\collections\\hashset::unserialize","icecave\\collections\\hashset::cascade","icecave\\collections\\hashset::cascadewithdefault","icecave\\collections\\hashset::cascadeiterable","icecave\\collections\\hashset::cascadeiterablewithdefault","icecave\\collections\\hashset::add","icecave\\collections\\hashset::addmany","icecave\\collections\\hashset::remove","icecave\\collections\\hashset::removemany","icecave\\collections\\hashset::isequalset","icecave\\collections\\hashset::issuperset","icecave\\collections\\hashset::issubset","icecave\\collections\\hashset::ispropersuperset","icecave\\collections\\hashset::ispropersubset","icecave\\collections\\hashset::isintersecting","icecave\\collections\\hashset::union","icecave\\collections\\hashset::unioninplace","icecave\\collections\\hashset::intersect","icecave\\collections\\hashset::intersectinplace","icecave\\collections\\hashset::diff","icecave\\collections\\hashset::diffinplace","icecave\\collections\\hashset::symmetricdiff","icecave\\collections\\hashset::symmetricdiffinplace","icecave\\collections\\hashset::compare","icecave\\collections\\hashset::cancompare","icecave\\collections\\hashset::isequalto","icecave\\collections\\hashset::isnotequalto","icecave\\collections\\hashset::islessthan","icecave\\collections\\hashset::isgreaterthan","icecave\\collections\\hashset::islessthanorequalto","icecave\\collections\\hashset::isgreaterthanorequalto","icecave\\collections\\iterableinterface::elements","icecave\\collections\\iterableinterface::contains","icecave\\collections\\iterableinterface::filter","icecave\\collections\\iterableinterface::map","icecave\\collections\\iterableinterface::partition","icecave\\collections\\iterableinterface::each","icecave\\collections\\iterableinterface::all","icecave\\collections\\iterableinterface::any","icecave\\collections\\iterator\\associativeiterator::__construct","icecave\\collections\\iterator\\associativeiterator::collection","icecave\\collections\\iterator\\associativeiterator::current","icecave\\collections\\iterator\\associativeiterator::key","icecave\\collections\\iterator\\associativeiterator::next","icecave\\collections\\iterator\\associativeiterator::rewind","icecave\\collections\\iterator\\associativeiterator::valid","icecave\\collections\\iterator\\randomaccessiterator::__construct","icecave\\collections\\iterator\\randomaccessiterator::collection","icecave\\collections\\iterator\\randomaccessiterator::current","icecave\\collections\\iterator\\randomaccessiterator::key","icecave\\collections\\iterator\\randomaccessiterator::next","icecave\\collections\\iterator\\randomaccessiterator::rewind","icecave\\collections\\iterator\\randomaccessiterator::valid","icecave\\collections\\iterator\\sequentialkeyiterator::__construct","icecave\\collections\\iterator\\sequentialkeyiterator::key","icecave\\collections\\iterator\\sequentialkeyiterator::next","icecave\\collections\\iterator\\sequentialkeyiterator::rewind","icecave\\collections\\iterator\\traits::__construct","icecave\\collections\\iterator\\traitsproviderinterface::iteratortraits","icecave\\collections\\linkedlist::__construct","icecave\\collections\\linkedlist::__clone","icecave\\collections\\linkedlist::size","icecave\\collections\\linkedlist::isempty","icecave\\collections\\linkedlist::__tostring","icecave\\collections\\linkedlist::clear","icecave\\collections\\linkedlist::iteratortraits","icecave\\collections\\linkedlist::elements","icecave\\collections\\linkedlist::contains","icecave\\collections\\linkedlist::filter","icecave\\collections\\linkedlist::map","icecave\\collections\\linkedlist::partition","icecave\\collections\\linkedlist::each","icecave\\collections\\linkedlist::all","icecave\\collections\\linkedlist::any","icecave\\collections\\linkedlist::filterinplace","icecave\\collections\\linkedlist::mapinplace","icecave\\collections\\linkedlist::front","icecave\\collections\\linkedlist::tryfront","icecave\\collections\\linkedlist::back","icecave\\collections\\linkedlist::tryback","icecave\\collections\\linkedlist::sort","icecave\\collections\\linkedlist::reverse","icecave\\collections\\linkedlist::join","icecave\\collections\\linkedlist::sortinplace","icecave\\collections\\linkedlist::reverseinplace","icecave\\collections\\linkedlist::append","icecave\\collections\\linkedlist::pushfront","icecave\\collections\\linkedlist::popfront","icecave\\collections\\linkedlist::trypopfront","icecave\\collections\\linkedlist::pushback","icecave\\collections\\linkedlist::popback","icecave\\collections\\linkedlist::trypopback","icecave\\collections\\linkedlist::resize","icecave\\collections\\linkedlist::get","icecave\\collections\\linkedlist::slice","icecave\\collections\\linkedlist::range","icecave\\collections\\linkedlist::indexof","icecave\\collections\\linkedlist::indexoflast","icecave\\collections\\linkedlist::find","icecave\\collections\\linkedlist::findlast","icecave\\collections\\linkedlist::set","icecave\\collections\\linkedlist::insert","icecave\\collections\\linkedlist::insertmany","icecave\\collections\\linkedlist::insertrange","icecave\\collections\\linkedlist::remove","icecave\\collections\\linkedlist::removemany","icecave\\collections\\linkedlist::removerange","icecave\\collections\\linkedlist::replace","icecave\\collections\\linkedlist::replacerange","icecave\\collections\\linkedlist::swap","icecave\\collections\\linkedlist::tryswap","icecave\\collections\\linkedlist::count","icecave\\collections\\linkedlist::current","icecave\\collections\\linkedlist::key","icecave\\collections\\linkedlist::next","icecave\\collections\\linkedlist::rewind","icecave\\collections\\linkedlist::valid","icecave\\collections\\linkedlist::serialize","icecave\\collections\\linkedlist::unserialize","icecave\\collections\\linkedlist::compare","icecave\\collections\\linkedlist::cancompare","icecave\\collections\\linkedlist::isequalto","icecave\\collections\\linkedlist::isnotequalto","icecave\\collections\\linkedlist::islessthan","icecave\\collections\\linkedlist::isgreaterthan","icecave\\collections\\linkedlist::islessthanorequalto","icecave\\collections\\linkedlist::isgreaterthanorequalto","icecave\\collections\\map::__construct","icecave\\collections\\map::__clone","icecave\\collections\\map::size","icecave\\collections\\map::isempty","icecave\\collections\\map::__tostring","icecave\\collections\\map::clear","icecave\\collections\\map::iteratortraits","icecave\\collections\\map::elements","icecave\\collections\\map::contains","icecave\\collections\\map::filter","icecave\\collections\\map::map","icecave\\collections\\map::partition","icecave\\collections\\map::each","icecave\\collections\\map::all","icecave\\collections\\map::any","icecave\\collections\\map::filterinplace","icecave\\collections\\map::mapinplace","icecave\\collections\\map::haskey","icecave\\collections\\map::get","icecave\\collections\\map::tryget","icecave\\collections\\map::getwithdefault","icecave\\collections\\map::cascade","icecave\\collections\\map::cascadewithdefault","icecave\\collections\\map::cascadeiterable","icecave\\collections\\map::cascadeiterablewithdefault","icecave\\collections\\map::keys","icecave\\collections\\map::values","icecave\\collections\\map::merge","icecave\\collections\\map::project","icecave\\collections\\map::projectiterable","icecave\\collections\\map::set","icecave\\collections\\map::add","icecave\\collections\\map::tryadd","icecave\\collections\\map::replace","icecave\\collections\\map::tryreplace","icecave\\collections\\map::remove","icecave\\collections\\map::tryremove","icecave\\collections\\map::mergeinplace","icecave\\collections\\map::swap","icecave\\collections\\map::tryswap","icecave\\collections\\map::move","icecave\\collections\\map::trymove","icecave\\collections\\map::rename","icecave\\collections\\map::tryrename","icecave\\collections\\map::count","icecave\\collections\\map::current","icecave\\collections\\map::key","icecave\\collections\\map::next","icecave\\collections\\map::rewind","icecave\\collections\\map::valid","icecave\\collections\\map::offsetexists","icecave\\collections\\map::offsetget","icecave\\collections\\map::offsetset","icecave\\collections\\map::offsetunset","icecave\\collections\\map::serialize","icecave\\collections\\map::unserialize","icecave\\collections\\map::compare","icecave\\collections\\map::cancompare","icecave\\collections\\map::isequalto","icecave\\collections\\map::isnotequalto","icecave\\collections\\map::islessthan","icecave\\collections\\map::isgreaterthan","icecave\\collections\\map::islessthanorequalto","icecave\\collections\\map::isgreaterthanorequalto","icecave\\collections\\mutableassociativeinterface::set","icecave\\collections\\mutableassociativeinterface::add","icecave\\collections\\mutableassociativeinterface::tryadd","icecave\\collections\\mutableassociativeinterface::replace","icecave\\collections\\mutableassociativeinterface::tryreplace","icecave\\collections\\mutableassociativeinterface::remove","icecave\\collections\\mutableassociativeinterface::tryremove","icecave\\collections\\mutableassociativeinterface::mergeinplace","icecave\\collections\\mutableassociativeinterface::swap","icecave\\collections\\mutableassociativeinterface::tryswap","icecave\\collections\\mutableassociativeinterface::move","icecave\\collections\\mutableassociativeinterface::trymove","icecave\\collections\\mutableassociativeinterface::rename","icecave\\collections\\mutableassociativeinterface::tryrename","icecave\\collections\\mutablecollectioninterface::clear","icecave\\collections\\mutableiterableinterface::filterinplace","icecave\\collections\\mutableiterableinterface::mapinplace","icecave\\collections\\mutablerandomaccessinterface::set","icecave\\collections\\mutablerandomaccessinterface::insert","icecave\\collections\\mutablerandomaccessinterface::insertmany","icecave\\collections\\mutablerandomaccessinterface::insertrange","icecave\\collections\\mutablerandomaccessinterface::remove","icecave\\collections\\mutablerandomaccessinterface::removemany","icecave\\collections\\mutablerandomaccessinterface::removerange","icecave\\collections\\mutablerandomaccessinterface::replace","icecave\\collections\\mutablerandomaccessinterface::replacerange","icecave\\collections\\mutablerandomaccessinterface::swap","icecave\\collections\\mutablerandomaccessinterface::tryswap","icecave\\collections\\mutablesequenceinterface::sortinplace","icecave\\collections\\mutablesequenceinterface::reverseinplace","icecave\\collections\\mutablesequenceinterface::append","icecave\\collections\\mutablesequenceinterface::pushfront","icecave\\collections\\mutablesequenceinterface::popfront","icecave\\collections\\mutablesequenceinterface::trypopfront","icecave\\collections\\mutablesequenceinterface::pushback","icecave\\collections\\mutablesequenceinterface::popback","icecave\\collections\\mutablesequenceinterface::trypopback","icecave\\collections\\mutablesequenceinterface::resize","icecave\\collections\\priorityqueue::__construct","icecave\\collections\\priorityqueue::__tostring","icecave\\collections\\priorityqueue::clear","icecave\\collections\\priorityqueue::next","icecave\\collections\\priorityqueue::push","icecave\\collections\\priorityqueue::pop","icecave\\collections\\priorityqueue::serialize","icecave\\collections\\priorityqueue::unserialize","icecave\\collections\\priorityqueue::cancompare","icecave\\collections\\queue::__construct","icecave\\collections\\queue::__clone","icecave\\collections\\queue::size","icecave\\collections\\queue::isempty","icecave\\collections\\queue::__tostring","icecave\\collections\\queue::clear","icecave\\collections\\queue::next","icecave\\collections\\queue::trynext","icecave\\collections\\queue::push","icecave\\collections\\queue::pop","icecave\\collections\\queue::trypop","icecave\\collections\\queue::count","icecave\\collections\\queue::serialize","icecave\\collections\\queue::unserialize","icecave\\collections\\queue::compare","icecave\\collections\\queue::cancompare","icecave\\collections\\queue::isequalto","icecave\\collections\\queue::isnotequalto","icecave\\collections\\queue::islessthan","icecave\\collections\\queue::isgreaterthan","icecave\\collections\\queue::islessthanorequalto","icecave\\collections\\queue::isgreaterthanorequalto","icecave\\collections\\queuedaccessinterface::next","icecave\\collections\\queuedaccessinterface::trynext","icecave\\collections\\queuedaccessinterface::push","icecave\\collections\\queuedaccessinterface::pop","icecave\\collections\\queuedaccessinterface::trypop","icecave\\collections\\randomaccessinterface::get","icecave\\collections\\randomaccessinterface::slice","icecave\\collections\\randomaccessinterface::range","icecave\\collections\\randomaccessinterface::indexof","icecave\\collections\\randomaccessinterface::indexoflast","icecave\\collections\\randomaccessinterface::find","icecave\\collections\\randomaccessinterface::findlast","icecave\\collections\\sequenceinterface::front","icecave\\collections\\sequenceinterface::tryfront","icecave\\collections\\sequenceinterface::back","icecave\\collections\\sequenceinterface::tryback","icecave\\collections\\sequenceinterface::sort","icecave\\collections\\sequenceinterface::reverse","icecave\\collections\\sequenceinterface::join","icecave\\collections\\set::__construct","icecave\\collections\\set::__clone","icecave\\collections\\set::size","icecave\\collections\\set::isempty","icecave\\collections\\set::__tostring","icecave\\collections\\set::clear","icecave\\collections\\set::iteratortraits","icecave\\collections\\set::elements","icecave\\collections\\set::contains","icecave\\collections\\set::filter","icecave\\collections\\set::map","icecave\\collections\\set::partition","icecave\\collections\\set::each","icecave\\collections\\set::all","icecave\\collections\\set::any","icecave\\collections\\set::filterinplace","icecave\\collections\\set::mapinplace","icecave\\collections\\set::count","icecave\\collections\\set::getiterator","icecave\\collections\\set::serialize","icecave\\collections\\set::unserialize","icecave\\collections\\set::cascade","icecave\\collections\\set::cascadewithdefault","icecave\\collections\\set::cascadeiterable","icecave\\collections\\set::cascadeiterablewithdefault","icecave\\collections\\set::add","icecave\\collections\\set::addmany","icecave\\collections\\set::remove","icecave\\collections\\set::removemany","icecave\\collections\\set::isequalset","icecave\\collections\\set::issuperset","icecave\\collections\\set::issubset","icecave\\collections\\set::ispropersuperset","icecave\\collections\\set::ispropersubset","icecave\\collections\\set::isintersecting","icecave\\collections\\set::union","icecave\\collections\\set::unioninplace","icecave\\collections\\set::intersect","icecave\\collections\\set::intersectinplace","icecave\\collections\\set::diff","icecave\\collections\\set::diffinplace","icecave\\collections\\set::symmetricdiff","icecave\\collections\\set::symmetricdiffinplace","icecave\\collections\\set::compare","icecave\\collections\\set::cancompare","icecave\\collections\\set::isequalto","icecave\\collections\\set::isnotequalto","icecave\\collections\\set::islessthan","icecave\\collections\\set::isgreaterthan","icecave\\collections\\set::islessthanorequalto","icecave\\collections\\set::isgreaterthanorequalto","icecave\\collections\\setinterface::cascade","icecave\\collections\\setinterface::cascadewithdefault","icecave\\collections\\setinterface::cascadeiterable","icecave\\collections\\setinterface::cascadeiterablewithdefault","icecave\\collections\\setinterface::add","icecave\\collections\\setinterface::addmany","icecave\\collections\\setinterface::remove","icecave\\collections\\setinterface::removemany","icecave\\collections\\setinterface::isequalset","icecave\\collections\\setinterface::issuperset","icecave\\collections\\setinterface::issubset","icecave\\collections\\setinterface::ispropersuperset","icecave\\collections\\setinterface::ispropersubset","icecave\\collections\\setinterface::isintersecting","icecave\\collections\\setinterface::union","icecave\\collections\\setinterface::unioninplace","icecave\\collections\\setinterface::intersect","icecave\\collections\\setinterface::intersectinplace","icecave\\collections\\setinterface::diff","icecave\\collections\\setinterface::diffinplace","icecave\\collections\\setinterface::symmetricdiff","icecave\\collections\\setinterface::symmetricdiffinplace","icecave\\collections\\stack::__construct","icecave\\collections\\stack::__clone","icecave\\collections\\stack::size","icecave\\collections\\stack::isempty","icecave\\collections\\stack::__tostring","icecave\\collections\\stack::clear","icecave\\collections\\stack::next","icecave\\collections\\stack::trynext","icecave\\collections\\stack::push","icecave\\collections\\stack::pop","icecave\\collections\\stack::trypop","icecave\\collections\\stack::count","icecave\\collections\\stack::serialize","icecave\\collections\\stack::unserialize","icecave\\collections\\stack::compare","icecave\\collections\\stack::cancompare","icecave\\collections\\stack::isequalto","icecave\\collections\\stack::isnotequalto","icecave\\collections\\stack::islessthan","icecave\\collections\\stack::isgreaterthan","icecave\\collections\\stack::islessthanorequalto","icecave\\collections\\stack::isgreaterthanorequalto","icecave\\collections\\utility\\associativekeygenerator::__construct","icecave\\collections\\utility\\associativekeygenerator::__invoke","icecave\\collections\\utility\\associativekeygenerator::generate","icecave\\collections\\utility\\objectidentitycomparator::__invoke","icecave\\collections\\vector::__construct","icecave\\collections\\vector::__clone","icecave\\collections\\vector::size","icecave\\collections\\vector::isempty","icecave\\collections\\vector::__tostring","icecave\\collections\\vector::clear","icecave\\collections\\vector::iteratortraits","icecave\\collections\\vector::elements","icecave\\collections\\vector::contains","icecave\\collections\\vector::filter","icecave\\collections\\vector::map","icecave\\collections\\vector::partition","icecave\\collections\\vector::each","icecave\\collections\\vector::all","icecave\\collections\\vector::any","icecave\\collections\\vector::filterinplace","icecave\\collections\\vector::mapinplace","icecave\\collections\\vector::front","icecave\\collections\\vector::tryfront","icecave\\collections\\vector::back","icecave\\collections\\vector::tryback","icecave\\collections\\vector::sort","icecave\\collections\\vector::reverse","icecave\\collections\\vector::join","icecave\\collections\\vector::sortinplace","icecave\\collections\\vector::reverseinplace","icecave\\collections\\vector::append","icecave\\collections\\vector::pushfront","icecave\\collections\\vector::popfront","icecave\\collections\\vector::trypopfront","icecave\\collections\\vector::pushback","icecave\\collections\\vector::popback","icecave\\collections\\vector::trypopback","icecave\\collections\\vector::resize","icecave\\collections\\vector::get","icecave\\collections\\vector::slice","icecave\\collections\\vector::range","icecave\\collections\\vector::indexof","icecave\\collections\\vector::indexoflast","icecave\\collections\\vector::find","icecave\\collections\\vector::findlast","icecave\\collections\\vector::set","icecave\\collections\\vector::insert","icecave\\collections\\vector::insertmany","icecave\\collections\\vector::insertrange","icecave\\collections\\vector::remove","icecave\\collections\\vector::removemany","icecave\\collections\\vector::removerange","icecave\\collections\\vector::replace","icecave\\collections\\vector::replacerange","icecave\\collections\\vector::swap","icecave\\collections\\vector::tryswap","icecave\\collections\\vector::count","icecave\\collections\\vector::current","icecave\\collections\\vector::key","icecave\\collections\\vector::next","icecave\\collections\\vector::rewind","icecave\\collections\\vector::valid","icecave\\collections\\vector::seek","icecave\\collections\\vector::offsetexists","icecave\\collections\\vector::offsetget","icecave\\collections\\vector::offsetset","icecave\\collections\\vector::offsetunset","icecave\\collections\\vector::serialize","icecave\\collections\\vector::unserialize","icecave\\collections\\vector::compare","icecave\\collections\\vector::cancompare","icecave\\collections\\vector::isequalto","icecave\\collections\\vector::isnotequalto","icecave\\collections\\vector::islessthan","icecave\\collections\\vector::isgreaterthan","icecave\\collections\\vector::islessthanorequalto","icecave\\collections\\vector::isgreaterthanorequalto","icecave\\collections\\vector::capacity","icecave\\collections\\vector::reserve","icecave\\collections\\vector::shrink"],
        'info': [["Icecave","","Icecave.html","","",3],["Icecave\\Collections","","Icecave\/Collections.html","","",3],["Icecave\\Collections\\Exception","","Icecave\/Collections\/Exception.html","","",3],["Icecave\\Collections\\Iterator","","Icecave\/Collections\/Iterator.html","","",3],["Icecave\\Collections\\Utility","","Icecave\/Collections\/Utility.html","","",3],["AssociativeInterface","Icecave\\Collections","Icecave\/Collections\/AssociativeInterface.html","","An associative collection is a variable-sized collection",1],["Collection","Icecave\\Collections","Icecave\/Collections\/Collection.html","","Utility functions for working with arbitrary collection",1],["CollectionInterface","Icecave\\Collections","Icecave\/Collections\/CollectionInterface.html","","A collection is an object that stores other objects",1],["CollectionExceptionInterface","Icecave\\Collections\\Exception","Icecave\/Collections\/Exception\/CollectionExceptionInterface.html","","A common interface for all collection exceptions.",1],["DuplicateKeyException","Icecave\\Collections\\Exception","Icecave\/Collections\/Exception\/DuplicateKeyException.html"," < RuntimeException","The key of an associative collection already exists",1],["EmptyCollectionException","Icecave\\Collections\\Exception","Icecave\/Collections\/Exception\/EmptyCollectionException.html"," < UnderflowException","An operation requiring an element was performed on",1],["IndexException","Icecave\\Collections\\Exception","Icecave\/Collections\/Exception\/IndexException.html"," < OutOfBoundsException","The index (subscript) of a random-access sequence was",1],["UnknownKeyException","Icecave\\Collections\\Exception","Icecave\/Collections\/Exception\/UnknownKeyException.html"," < OutOfBoundsException","The key of an associative collection was not found",1],["HashMap","Icecave\\Collections","Icecave\/Collections\/HashMap.html","","An associative collection with efficient access by",1],["HashSet","Icecave\\Collections","Icecave\/Collections\/HashSet.html","","An iterable collection with unique elements.",1],["IterableInterface","Icecave\\Collections","Icecave\/Collections\/IterableInterface.html","","Iterable collections allow (at the very least) sequential",1],["AssociativeIterator","Icecave\\Collections\\Iterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html","","A generic iterator for any collection that implement",1],["RandomAccessIterator","Icecave\\Collections\\Iterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html","","A generic iterator for any collection that implement",1],["SequentialKeyIterator","Icecave\\Collections\\Iterator","Icecave\/Collections\/Iterator\/SequentialKeyIterator.html"," < IteratorIterator","Wraps a traversable in an iterator that yields an integer",1],["Traits","Icecave\\Collections\\Iterator","Icecave\/Collections\/Iterator\/Traits.html","","Describes the traits and capabilities of an iterator.",1],["TraitsProviderInterface","Icecave\\Collections\\Iterator","Icecave\/Collections\/Iterator\/TraitsProviderInterface.html","","",1],["LinkedList","Icecave\\Collections","Icecave\/Collections\/LinkedList.html","","A mutable sequence with efficient addition and removal",1],["Map","Icecave\\Collections","Icecave\/Collections\/Map.html","","An associative collection with efficient access by",1],["MutableAssociativeInterface","Icecave\\Collections","Icecave\/Collections\/MutableAssociativeInterface.html","","An associative collection is a variable-sized collection",1],["MutableCollectionInterface","Icecave\\Collections","Icecave\/Collections\/MutableCollectionInterface.html","","A mutable collection is a collection on which elements",1],["MutableIterableInterface","Icecave\\Collections","Icecave\/Collections\/MutableIterableInterface.html","","A mutable collection is a collection on which elements",1],["MutableRandomAccessInterface","Icecave\\Collections","Icecave\/Collections\/MutableRandomAccessInterface.html","","A mutable random access sequence is a sequence that",1],["MutableSequenceInterface","Icecave\\Collections","Icecave\/Collections\/MutableSequenceInterface.html","","A Sequence is a variable-sized collection whose elements",1],["PriorityQueue","Icecave\\Collections","Icecave\/Collections\/PriorityQueue.html"," < Queue","A prioritized first-in\/first-out (FIFO) queue of elements.",1],["Queue","Icecave\\Collections","Icecave\/Collections\/Queue.html","","A first-in\/first-out (FIFO) queue of elements.",1],["QueuedAccessInterface","Icecave\\Collections","Icecave\/Collections\/QueuedAccessInterface.html","","The common interface between queues and stacks.",1],["RandomAccessInterface","Icecave\\Collections","Icecave\/Collections\/RandomAccessInterface.html","","A random access sequence is a sequence that provides",1],["SequenceInterface","Icecave\\Collections","Icecave\/Collections\/SequenceInterface.html","","A Sequence is a variable-sized collection whose elements",1],["Set","Icecave\\Collections","Icecave\/Collections\/Set.html","","An iterable collection with unique elements.",1],["SetInterface","Icecave\\Collections","Icecave\/Collections\/SetInterface.html","","An iterable collection with unique elements.",1],["Stack","Icecave\\Collections","Icecave\/Collections\/Stack.html","","A last-in\/first-out (LIFO) stack of elements.",1],["AssociativeKeyGenerator","Icecave\\Collections\\Utility","Icecave\/Collections\/Utility\/AssociativeKeyGenerator.html","","A basic associative key generator that allows for keys",1],["ObjectIdentityComparator","Icecave\\Collections\\Utility","Icecave\/Collections\/Utility\/ObjectIdentityComparator.html"," < DeepComparator","A deep comparator with relaxed comparisons for objects.",1],["Vector","Icecave\\Collections","Icecave\/Collections\/Vector.html","","A mutable sequence with efficient access by position",1],["AssociativeInterface::hasKey","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_hasKey","(mixed $key)","Check if the collection contains an element with the",2],["AssociativeInterface::get","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_get","(mixed $key)","Fetch the value associated with the given key.",2],["AssociativeInterface::tryGet","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_tryGet","(mixed $key, mixed $value)","Fetch the value associated with the given key if it",2],["AssociativeInterface::getWithDefault","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_getWithDefault","(mixed $key, mixed $default = null)","Fetch the value associated with the given key, or a",2],["AssociativeInterface::cascade","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_cascade","($key)","Return the value associated with the first key that",2],["AssociativeInterface::cascadeWithDefault","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_cascadeWithDefault","($default, $key)","Return the value associated with the first key that",2],["AssociativeInterface::cascadeIterable","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_cascadeIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Return the value associated with the first existing",2],["AssociativeInterface::cascadeIterableWithDefault","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_cascadeIterableWithDefault","(mixed $default, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Return the value associated with the first existing",2],["AssociativeInterface::keys","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_keys","()","Fetch a native array containing the keys in the collection.",2],["AssociativeInterface::values","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_values","()","Fetch a native array containing the values in the collection.",2],["AssociativeInterface::merge","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_merge","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","Produce a new collection containing the elements of",2],["AssociativeInterface::project","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_project","($key)","Create a new collection containing the elements associated",2],["AssociativeInterface::projectIterable","Icecave\\Collections\\AssociativeInterface","Icecave\/Collections\/AssociativeInterface.html#method_projectIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Create a new collection containing the elements associated",2],["Collection::isEmpty","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_isEmpty","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/CollectionInterface.html\"><abbr title=\"Icecave\\Collections\\CollectionInterface\">CollectionInterface<\/abbr><\/a> $collection)","Check if a collection is empty.",2],["Collection::size","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_size","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"http:\/\/php.net\/Countable\"><abbr title=\"Countable\">Countable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/CollectionInterface.html\"><abbr title=\"Icecave\\Collections\\CollectionInterface\">CollectionInterface<\/abbr><\/a> $collection)","Get the number of elements in a collection.",2],["Collection::get","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_get","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection, mixed $key)","Fetch the value associated with the given key.",2],["Collection::tryGet","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_tryGet","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection, mixed $key, mixed $value)","Fetch the value associated with the given key if it",2],["Collection::getWithDefault","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_getWithDefault","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, mixed $key, mixed $default = null)","Fetch the value associated with the given key, or a",2],["Collection::hasKey","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_hasKey","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, mixed $key)","Check if the collection contains an element with the",2],["Collection::contains","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_contains","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, mixed $value)","Check if the collection contains an element with the",2],["Collection::keys","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_keys","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/SequenceInterface.html\"><abbr title=\"Icecave\\Collections\\SequenceInterface\">SequenceInterface<\/abbr><\/a> $collection)","Get the keys of a collection.",2],["Collection::values","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_values","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/SequenceInterface.html\"><abbr title=\"Icecave\\Collections\\SequenceInterface\">SequenceInterface<\/abbr><\/a> $collection)","Get the values of a collection.",2],["Collection::elements","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_elements","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/CollectionInterface.html\"><abbr title=\"Icecave\\Collections\\CollectionInterface\">CollectionInterface<\/abbr><\/a> $collection)","Get the elements of a collection.",2],["Collection::map","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_map","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform, array|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a> $result = array())","Produce a new collection by applying a transformation",2],["Collection::filter","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_filter","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate, array|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a> $result = array())","Fetch a new collection with a subset of the elements",2],["Collection::each","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_each","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["Collection::all","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_all","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Collection::any","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_any","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/IterableInterface.html\"><abbr title=\"Icecave\\Collections\\IterableInterface\">IterableInterface<\/abbr><\/a> $collection, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Collection::isSequential","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_isSequential","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/CollectionInterface.html\"><abbr title=\"Icecave\\Collections\\CollectionInterface\">CollectionInterface<\/abbr><\/a> $collection)","Check if a collection contains sequential integer keys.",2],["Collection::getIterator","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_getIterator","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $collection)","Get an iterator for any traversable type.",2],["Collection::addElement","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_addElement","(<a href=\"Icecave\/Collections\/MutableSequenceInterface.html\"><abbr title=\"Icecave\\Collections\\MutableSequenceInterface\">MutableSequenceInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/QueuedAccessInterface.html\"><abbr title=\"Icecave\\Collections\\QueuedAccessInterface\">QueuedAccessInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $collection, mixed $element)","Add an element to a collection.",2],["Collection::addElements","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_addElements","(<a href=\"Icecave\/Collections\/MutableSequenceInterface.html\"><abbr title=\"Icecave\\Collections\\MutableSequenceInterface\">MutableSequenceInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/QueuedAccessInterface.html\"><abbr title=\"Icecave\\Collections\\QueuedAccessInterface\">QueuedAccessInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $collection, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Add elements from one collection to another.",2],["Collection::implode","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_implode","(string $separator, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $collection, string $emptyResult = &#039;&#039;, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $transform = null)","Create a string by joining the elements in a collection.",2],["Collection::explode","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_explode","(string $separator, string $string, integer|null $limit = null, <a href=\"Icecave\/Collections\/MutableSequenceInterface.html\"><abbr title=\"Icecave\\Collections\\MutableSequenceInterface\">MutableSequenceInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/QueuedAccessInterface.html\"><abbr title=\"Icecave\\Collections\\QueuedAccessInterface\">QueuedAccessInterface<\/abbr><\/a>|<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a>|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a>|array $collection = array(), <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $transform = null, string|null $encoding = null)","Split a string based on a separator.",2],["Collection::iteratorTraits","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_iteratorTraits","(array|<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a>|<a href=\"http:\/\/php.net\/Countable\"><abbr title=\"Countable\">Countable<\/abbr><\/a>|<a href=\"Icecave\/Collections\/Iterator\/TraitsProviderInterface.html\"><abbr title=\"Icecave\\Collections\\Iterator\\TraitsProviderInterface\">TraitsProviderInterface<\/abbr><\/a> $iterator)","Fetch the traits for an iterator.",2],["Collection::compare","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_compare","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $lhs, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $rhs, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $comparator = &#039;Icecave\\\\Parity\\\\Parity::compare&#039;)","Compare two collections.",2],["Collection::lowerBound","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_lowerBound","(array|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a> $collection, mixed $element, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $comparator, integer $begin, integer|null $end = null)","Return the index of the first element in a sorted collection",2],["Collection::upperBound","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_upperBound","(array|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a> $collection, mixed $element, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $comparator, integer $begin, integer|null $end = null)","Return the index of the first element in a sorted collection",2],["Collection::binarySearch","Icecave\\Collections\\Collection","Icecave\/Collections\/Collection.html#method_binarySearch","(array|<a href=\"http:\/\/php.net\/ArrayAccess\"><abbr title=\"ArrayAccess\">ArrayAccess<\/abbr><\/a> $collection, mixed $element, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $comparator, integer $begin, integer|null $end = null, integer|null $insertIndex = null)","Perform a binary search on a sorted sequence.",2],["CollectionInterface::size","Icecave\\Collections\\CollectionInterface","Icecave\/Collections\/CollectionInterface.html#method_size","()","Fetch the number of elements in the collection.",2],["CollectionInterface::isEmpty","Icecave\\Collections\\CollectionInterface","Icecave\/Collections\/CollectionInterface.html#method_isEmpty","()","Check if the collection is empty.",2],["CollectionInterface::__toString","Icecave\\Collections\\CollectionInterface","Icecave\/Collections\/CollectionInterface.html#method___toString","()","Fetch a string representation of the collection.",2],["DuplicateKeyException::__construct","Icecave\\Collections\\Exception\\DuplicateKeyException","Icecave\/Collections\/Exception\/DuplicateKeyException.html#method___construct","(mixed $key, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["EmptyCollectionException::__construct","Icecave\\Collections\\Exception\\EmptyCollectionException","Icecave\/Collections\/Exception\/EmptyCollectionException.html#method___construct","(<a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["IndexException::__construct","Icecave\\Collections\\Exception\\IndexException","Icecave\/Collections\/Exception\/IndexException.html#method___construct","(integer $index, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["UnknownKeyException::__construct","Icecave\\Collections\\Exception\\UnknownKeyException","Icecave\/Collections\/Exception\/UnknownKeyException.html#method___construct","(mixed $key, <a href=\"http:\/\/php.net\/Exception\"><abbr title=\"Exception\">Exception<\/abbr><\/a> $previous = null)","",2],["HashMap::__construct","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $hashFunction = null)","",2],["HashMap::size","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_size","()","Fetch the number of elements in the collection.",2],["HashMap::isEmpty","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isEmpty","()","Check if the collection is empty.",2],["HashMap::__toString","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method___toString","()","Fetch a string representation of the collection.",2],["HashMap::clear","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_clear","()","Remove all elements from the collection.",2],["HashMap::iteratorTraits","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["HashMap::elements","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_elements","()","Fetch a native array containing the elements in the",2],["HashMap::contains","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_contains","(mixed $value)","Check if the collection contains an element with the",2],["HashMap::filter","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["HashMap::map","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["HashMap::partition","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["HashMap::each","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["HashMap::all","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["HashMap::any","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["HashMap::filterInPlace","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["HashMap::mapInPlace","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["HashMap::hasKey","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_hasKey","(mixed $key)","Check if the collection contains an element with the",2],["HashMap::get","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_get","(mixed $key)","Fetch the value associated with the given key.",2],["HashMap::tryGet","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_tryGet","(mixed $key, mixed $value)","Fetch the value associated with the given key if it",2],["HashMap::getWithDefault","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_getWithDefault","(mixed $key, mixed $default = null)","Fetch the value associated with the given key, or a",2],["HashMap::cascade","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_cascade","($key)","Return the value associated with the first key that",2],["HashMap::cascadeWithDefault","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_cascadeWithDefault","($default, $key)","Return the value associated with the first key that",2],["HashMap::cascadeIterable","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_cascadeIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Return the value associated with the first existing",2],["HashMap::cascadeIterableWithDefault","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_cascadeIterableWithDefault","(mixed $default, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Return the value associated with the first existing",2],["HashMap::keys","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_keys","()","Fetch a native array containing the keys in the collection.",2],["HashMap::values","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_values","()","Fetch a native array containing the values in the collection.",2],["HashMap::merge","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_merge","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","Produce a new collection containing the elements of",2],["HashMap::project","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_project","($key)","Create a new collection containing the elements associated",2],["HashMap::projectIterable","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_projectIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Create a new collection containing the elements associated",2],["HashMap::set","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_set","(mixed $key, mixed $value)","Associate a value with a key.",2],["HashMap::add","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_add","(mixed $key, mixed $value)","Associate a value with a new key.",2],["HashMap::tryAdd","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_tryAdd","(mixed $key, mixed $value)","Associate a value with a new key.",2],["HashMap::replace","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_replace","(mixed $key, mixed $value)","Associate a new value with an existing key.",2],["HashMap::tryReplace","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_tryReplace","(mixed $key, mixed $value, mixed $previous = null)","Associate a new value with an existing key.",2],["HashMap::remove","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_remove","(mixed $key)","Remove an element from the collection.",2],["HashMap::tryRemove","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_tryRemove","(mixed $key, mixed $value = null)","Remove an element from the collection.",2],["HashMap::mergeInPlace","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_mergeInPlace","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","Add the elements from one or more other collections",2],["HashMap::swap","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_swap","(mixed $key1, mixed $key2)","Swap the elements associated with two keys.",2],["HashMap::trySwap","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_trySwap","(mixed $key1, mixed $key2)","Swap the elements associated with two keys.",2],["HashMap::move","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_move","(mixed $source, mixed $target)","Move an element from one key to another, replacing",2],["HashMap::tryMove","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_tryMove","(mixed $source, mixed $target)","Move an element from one key to another, replacing",2],["HashMap::rename","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_rename","(mixed $source, mixed $target)","Move an element from one key to another.",2],["HashMap::tryRename","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_tryRename","(mixed $source, mixed $target)","Move an element from one key to another.",2],["HashMap::count","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_count","()","",2],["HashMap::current","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_current","()","",2],["HashMap::key","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_key","()","",2],["HashMap::next","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_next","()","",2],["HashMap::rewind","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_rewind","()","",2],["HashMap::valid","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_valid","()","",2],["HashMap::offsetExists","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_offsetExists","(mixed $offset)","Check if the collection contains an element with the",2],["HashMap::offsetGet","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_offsetGet","(mixed $offset)","Fetch the value associated with the given key.",2],["HashMap::offsetSet","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_offsetSet","(mixed $offset, mixed $value)","Associate a value with a key.",2],["HashMap::offsetUnset","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_offsetUnset","(mixed $offset)","Remove an element from the collection, if it is present.",2],["HashMap::serialize","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_serialize","()","Serialize the collection.",2],["HashMap::unserialize","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["HashMap::compare","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["HashMap::canCompare","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["HashMap::isEqualTo","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isEqualTo","(mixed $value)","",2],["HashMap::isNotEqualTo","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isNotEqualTo","(mixed $value)","",2],["HashMap::isLessThan","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isLessThan","(mixed $value)","",2],["HashMap::isGreaterThan","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isGreaterThan","(mixed $value)","",2],["HashMap::isLessThanOrEqualTo","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["HashMap::isGreaterThanOrEqualTo","Icecave\\Collections\\HashMap","Icecave\/Collections\/HashMap.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["HashSet::__construct","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $hashFunction = null)","",2],["HashSet::size","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_size","()","Fetch the number of elements in the collection.",2],["HashSet::isEmpty","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isEmpty","()","Check if the collection is empty.",2],["HashSet::__toString","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method___toString","()","Fetch a string representation of the collection.",2],["HashSet::clear","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_clear","()","Remove all elements from the collection.",2],["HashSet::iteratorTraits","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["HashSet::elements","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_elements","()","Fetch a native array containing the elements in the",2],["HashSet::contains","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_contains","(mixed $element)","Check if the collection contains an element with the",2],["HashSet::filter","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["HashSet::map","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["HashSet::partition","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["HashSet::each","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["HashSet::all","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["HashSet::any","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["HashSet::filterInPlace","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["HashSet::mapInPlace","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["HashSet::count","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_count","()","",2],["HashSet::getIterator","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_getIterator","()","",2],["HashSet::serialize","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_serialize","()","Serialize the collection.",2],["HashSet::unserialize","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["HashSet::cascade","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_cascade","($element)","Return the first of the given elements that is contained",2],["HashSet::cascadeWithDefault","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_cascadeWithDefault","($default, $element)","Return the first of the given elements that is contained",2],["HashSet::cascadeIterable","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_cascadeIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Return the first of the given elements that is contained",2],["HashSet::cascadeIterableWithDefault","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_cascadeIterableWithDefault","(mixed $default, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Return the first of the given elements that is contained",2],["HashSet::add","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_add","(mixed $element)","Add an element to the set.",2],["HashSet::addMany","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_addMany","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Add multiple elements to the set.",2],["HashSet::remove","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_remove","(mixed $element)","Remove an element from the set, if it exists.",2],["HashSet::removeMany","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_removeMany","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Remove multiple elements from the set.",2],["HashSet::isEqualSet","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isEqualSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is equal to another.",2],["HashSet::isSuperSet","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isSuperSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a superset of another.",2],["HashSet::isSubSet","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isSubSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a subset of another.",2],["HashSet::isProperSuperSet","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isProperSuperSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a proper superset of another.",2],["HashSet::isProperSubSet","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isProperSubSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a proper subset of another.",2],["HashSet::isIntersecting","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isIntersecting","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is intersecting another.",2],["HashSet::union","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_union","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the union of this set and another.",2],["HashSet::unionInPlace","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_unionInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the union of this set and another, in place.",2],["HashSet::intersect","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_intersect","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the intersection of this set and another.",2],["HashSet::intersectInPlace","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_intersectInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the intersection of this set and another, in",2],["HashSet::diff","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_diff","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the difference (or complement) of this set",2],["HashSet::diffInPlace","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_diffInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the difference (or complement) of this set",2],["HashSet::symmetricDiff","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_symmetricDiff","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the symmetric difference (or complement) of",2],["HashSet::symmetricDiffInPlace","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_symmetricDiffInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the symmetric difference (or complement) of",2],["HashSet::compare","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["HashSet::canCompare","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["HashSet::isEqualTo","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isEqualTo","(mixed $value)","",2],["HashSet::isNotEqualTo","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isNotEqualTo","(mixed $value)","",2],["HashSet::isLessThan","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isLessThan","(mixed $value)","",2],["HashSet::isGreaterThan","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isGreaterThan","(mixed $value)","",2],["HashSet::isLessThanOrEqualTo","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["HashSet::isGreaterThanOrEqualTo","Icecave\\Collections\\HashSet","Icecave\/Collections\/HashSet.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["IterableInterface::elements","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_elements","()","Fetch a native array containing the elements in the",2],["IterableInterface::contains","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_contains","(mixed $element)","Check if the collection contains an element.",2],["IterableInterface::filter","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["IterableInterface::map","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["IterableInterface::partition","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["IterableInterface::each","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["IterableInterface::all","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["IterableInterface::any","Icecave\\Collections\\IterableInterface","Icecave\/Collections\/IterableInterface.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["AssociativeIterator::__construct","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method___construct","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","",2],["AssociativeIterator::collection","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method_collection","()","Fetch the collection to be iterated.",2],["AssociativeIterator::current","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method_current","()","Fetch the current value.",2],["AssociativeIterator::key","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method_key","()","Fetch the current key.",2],["AssociativeIterator::next","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method_next","()","Advance to the next element.",2],["AssociativeIterator::rewind","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method_rewind","()","Rewind to the first element.",2],["AssociativeIterator::valid","Icecave\\Collections\\Iterator\\AssociativeIterator","Icecave\/Collections\/Iterator\/AssociativeIterator.html#method_valid","()","Check if the current element is valid.",2],["RandomAccessIterator::__construct","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method___construct","(<a href=\"Icecave\/Collections\/RandomAccessInterface.html\"><abbr title=\"Icecave\\Collections\\RandomAccessInterface\">RandomAccessInterface<\/abbr><\/a> $collection)","",2],["RandomAccessIterator::collection","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method_collection","()","Fetch the collection to be iterated.",2],["RandomAccessIterator::current","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method_current","()","Fetch the current value.",2],["RandomAccessIterator::key","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method_key","()","Fetch the current key.",2],["RandomAccessIterator::next","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method_next","()","Advance to the next element.",2],["RandomAccessIterator::rewind","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method_rewind","()","Rewind to the first element.",2],["RandomAccessIterator::valid","Icecave\\Collections\\Iterator\\RandomAccessIterator","Icecave\/Collections\/Iterator\/RandomAccessIterator.html#method_valid","()","Check if the current element is valid.",2],["SequentialKeyIterator::__construct","Icecave\\Collections\\Iterator\\SequentialKeyIterator","Icecave\/Collections\/Iterator\/SequentialKeyIterator.html#method___construct","(<a href=\"http:\/\/php.net\/Traversable\"><abbr title=\"Traversable\">Traversable<\/abbr><\/a> $iterator)","",2],["SequentialKeyIterator::key","Icecave\\Collections\\Iterator\\SequentialKeyIterator","Icecave\/Collections\/Iterator\/SequentialKeyIterator.html#method_key","()","Fetch the current key.",2],["SequentialKeyIterator::next","Icecave\\Collections\\Iterator\\SequentialKeyIterator","Icecave\/Collections\/Iterator\/SequentialKeyIterator.html#method_next","()","Advance to the next element.",2],["SequentialKeyIterator::rewind","Icecave\\Collections\\Iterator\\SequentialKeyIterator","Icecave\/Collections\/Iterator\/SequentialKeyIterator.html#method_rewind","()","Rewind to the first element.",2],["Traits::__construct","Icecave\\Collections\\Iterator\\Traits","Icecave\/Collections\/Iterator\/Traits.html#method___construct","(boolean $isCountable, boolean $isRewindable)","",2],["TraitsProviderInterface::iteratorTraits","Icecave\\Collections\\Iterator\\TraitsProviderInterface","Icecave\/Collections\/Iterator\/TraitsProviderInterface.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["LinkedList::__construct","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null)","",2],["LinkedList::__clone","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method___clone","()","",2],["LinkedList::size","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_size","()","Fetch the number of elements in the collection.",2],["LinkedList::isEmpty","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isEmpty","()","Check if the collection is empty.",2],["LinkedList::__toString","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method___toString","()","Fetch a string representation of the collection.",2],["LinkedList::clear","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_clear","()","Remove all elements from the collection.",2],["LinkedList::iteratorTraits","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["LinkedList::elements","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_elements","()","Fetch a native array containing the elements in the",2],["LinkedList::contains","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_contains","(mixed $element)","Check if the collection contains an element.",2],["LinkedList::filter","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["LinkedList::map","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["LinkedList::partition","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["LinkedList::each","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["LinkedList::all","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["LinkedList::any","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["LinkedList::filterInPlace","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["LinkedList::mapInPlace","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["LinkedList::front","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_front","()","Fetch the first element in the sequence.",2],["LinkedList::tryFront","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_tryFront","(mixed $element)","Fetch the first element in the sequence.",2],["LinkedList::back","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_back","()","Fetch the last element in the sequence.",2],["LinkedList::tryBack","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_tryBack","(mixed $element)","Fetch the last element in the sequence.",2],["LinkedList::sort","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_sort","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","Create a new sequence with the elements from this sequence",2],["LinkedList::reverse","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_reverse","()","Create a new sequence with the elements from this sequence",2],["LinkedList::join","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_join","($sequence)","Create a new sequence by appending the elements in",2],["LinkedList::sortInPlace","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_sortInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","Sort this sequence in-place.",2],["LinkedList::reverseInPlace","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_reverseInPlace","()","Reverse this sequence in-place.",2],["LinkedList::append","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_append","($sequence)","Appending elements in the given sequence to this sequence.",2],["LinkedList::pushFront","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_pushFront","(mixed $element)","Add a new element to the front of the sequence.",2],["LinkedList::popFront","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_popFront","()","Remove and return the element at the front of the sequence.",2],["LinkedList::tryPopFront","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_tryPopFront","(mixed $element = null)","Remove the element at the front of the sequence.",2],["LinkedList::pushBack","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_pushBack","(mixed $element)","Add a new element to the back of the sequence.",2],["LinkedList::popBack","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_popBack","()","Remove and return the element at the back of the sequence.",2],["LinkedList::tryPopBack","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_tryPopBack","(mixed $element = null)","Remove the element at the back of the sequence.",2],["LinkedList::resize","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_resize","(integer $size, mixed $element = null)","Resize the sequence.",2],["LinkedList::get","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_get","(mixed $index)","Fetch the element at the given index.",2],["LinkedList::slice","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_slice","(integer $index, integer|null $count = null)","Extract a range of elements.",2],["LinkedList::range","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_range","(integer $begin, integer $end)","Extract a range of elements.",2],["LinkedList::indexOf","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_indexOf","(mixed $element, integer $begin, integer|null $end = null)","Find the index of the first instance of a particular",2],["LinkedList::indexOfLast","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_indexOfLast","(mixed $element, integer $begin, integer|null $end = null)","Find the index of the last instance of a particular",2],["LinkedList::find","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_find","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate, integer $begin, integer|null $end = null)","Find the index of the first instance of an element",2],["LinkedList::findLast","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_findLast","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate, integer $begin, integer|null $end = null)","Find the index of the last instance of an element matching",2],["LinkedList::set","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_set","(integer $index, mixed $element)","Replace the element at a particular position in the",2],["LinkedList::insert","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_insert","(integer $index, mixed $element)","Insert an element at a particular index.",2],["LinkedList::insertMany","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_insertMany","(integer $index, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Insert all elements from another collection at a particular",2],["LinkedList::insertRange","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_insertRange","($index, <a href=\"Icecave\/Collections\/RandomAccessInterface.html\"><abbr title=\"Icecave\\Collections\\RandomAccessInterface\">RandomAccessInterface<\/abbr><\/a> $elements, $begin, $end = null)","Insert a sub-range of another collection at a particular",2],["LinkedList::remove","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_remove","(integer $index)","Remove the element at a given index.",2],["LinkedList::removeMany","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_removeMany","(integer $index, integer|null $count = null)","Remove a range of elements at a given index.",2],["LinkedList::removeRange","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_removeRange","(integer $begin, integer $end)","Remove a range of elements at a given index.",2],["LinkedList::replace","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_replace","(integer $index, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements, integer|null $count = null)","Replace a range of elements with a second set of elements.",2],["LinkedList::replaceRange","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_replaceRange","(integer $begin, integer $end, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Replace a range of elements with a second set of elements.",2],["LinkedList::swap","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_swap","(integer $index1, integer $index2)","Swap the elements at two index positions.",2],["LinkedList::trySwap","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_trySwap","(integer $index1, integer $index2)","Swap the elements at two index positions.",2],["LinkedList::count","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_count","()","",2],["LinkedList::current","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_current","()","",2],["LinkedList::key","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_key","()","",2],["LinkedList::next","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_next","()","",2],["LinkedList::rewind","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_rewind","()","",2],["LinkedList::valid","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_valid","()","",2],["LinkedList::serialize","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_serialize","()","Serialize the collection.",2],["LinkedList::unserialize","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["LinkedList::compare","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["LinkedList::canCompare","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["LinkedList::isEqualTo","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isEqualTo","(mixed $value)","",2],["LinkedList::isNotEqualTo","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isNotEqualTo","(mixed $value)","",2],["LinkedList::isLessThan","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isLessThan","(mixed $value)","",2],["LinkedList::isGreaterThan","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isGreaterThan","(mixed $value)","",2],["LinkedList::isLessThanOrEqualTo","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["LinkedList::isGreaterThanOrEqualTo","Icecave\\Collections\\LinkedList","Icecave\/Collections\/LinkedList.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["Map::__construct","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","",2],["Map::__clone","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method___clone","()","",2],["Map::size","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_size","()","Fetch the number of elements in the collection.",2],["Map::isEmpty","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isEmpty","()","Check if the collection is empty.",2],["Map::__toString","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method___toString","()","Fetch a string representation of the collection.",2],["Map::clear","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_clear","()","Remove all elements from the collection.",2],["Map::iteratorTraits","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["Map::elements","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_elements","()","Fetch a native array containing the elements in the",2],["Map::contains","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_contains","(mixed $value)","Check if the collection contains an element with the",2],["Map::filter","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["Map::map","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["Map::partition","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["Map::each","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["Map::all","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Map::any","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Map::filterInPlace","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["Map::mapInPlace","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["Map::hasKey","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_hasKey","(mixed $key)","Check if the collection contains an element with the",2],["Map::get","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_get","(mixed $key)","Fetch the value associated with the given key.",2],["Map::tryGet","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_tryGet","(mixed $key, mixed $value)","Fetch the value associated with the given key if it",2],["Map::getWithDefault","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_getWithDefault","(mixed $key, mixed $default = null)","Fetch the value associated with the given key, or a",2],["Map::cascade","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_cascade","($key)","Return the value associated with the first key that",2],["Map::cascadeWithDefault","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_cascadeWithDefault","($default, $key)","Return the value associated with the first key that",2],["Map::cascadeIterable","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_cascadeIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Return the value associated with the first existing",2],["Map::cascadeIterableWithDefault","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_cascadeIterableWithDefault","(mixed $default, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Return the value associated with the first existing",2],["Map::keys","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_keys","()","Fetch a native array containing the keys in the collection.",2],["Map::values","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_values","()","Fetch a native array containing the values in the collection.",2],["Map::merge","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_merge","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","Produce a new collection containing the elements of",2],["Map::project","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_project","($key)","Create a new collection containing the elements associated",2],["Map::projectIterable","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_projectIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $keys)","Create a new collection containing the elements associated",2],["Map::set","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_set","(mixed $key, mixed $value)","Associate a value with a key.",2],["Map::add","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_add","(mixed $key, mixed $value)","Associate a value with a new key.",2],["Map::tryAdd","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_tryAdd","(mixed $key, mixed $value)","Associate a value with a new key.",2],["Map::replace","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_replace","(mixed $key, mixed $value)","Associate a new value with an existing key.",2],["Map::tryReplace","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_tryReplace","(mixed $key, mixed $value, mixed $previous = null)","Associate a new value with an existing key.",2],["Map::remove","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_remove","(mixed $key)","Remove an element from the collection.",2],["Map::tryRemove","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_tryRemove","(mixed $key, mixed $value = null)","Remove an element from the collection.",2],["Map::mergeInPlace","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_mergeInPlace","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","Add the elements from one or more other collections",2],["Map::swap","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_swap","(mixed $key1, mixed $key2)","Swap the elements associated with two keys.",2],["Map::trySwap","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_trySwap","(mixed $key1, mixed $key2)","Swap the elements associated with two keys.",2],["Map::move","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_move","(mixed $source, mixed $target)","Move an element from one key to another, replacing",2],["Map::tryMove","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_tryMove","(mixed $source, mixed $target)","Move an element from one key to another, replacing",2],["Map::rename","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_rename","(mixed $source, mixed $target)","Move an element from one key to another.",2],["Map::tryRename","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_tryRename","(mixed $source, mixed $target)","Move an element from one key to another.",2],["Map::count","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_count","()","",2],["Map::current","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_current","()","",2],["Map::key","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_key","()","",2],["Map::next","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_next","()","",2],["Map::rewind","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_rewind","()","",2],["Map::valid","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_valid","()","",2],["Map::offsetExists","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_offsetExists","(mixed $offset)","Check if the collection contains an element with the",2],["Map::offsetGet","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_offsetGet","(mixed $offset)","Fetch the value associated with the given key.",2],["Map::offsetSet","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_offsetSet","(mixed $offset, mixed $value)","Associate a value with a key.",2],["Map::offsetUnset","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_offsetUnset","(mixed $offset)","Remove an element from the collection, if it is present.",2],["Map::serialize","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_serialize","()","Serialize the collection.",2],["Map::unserialize","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["Map::compare","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["Map::canCompare","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["Map::isEqualTo","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isEqualTo","(mixed $value)","",2],["Map::isNotEqualTo","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isNotEqualTo","(mixed $value)","",2],["Map::isLessThan","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isLessThan","(mixed $value)","",2],["Map::isGreaterThan","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isGreaterThan","(mixed $value)","",2],["Map::isLessThanOrEqualTo","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["Map::isGreaterThanOrEqualTo","Icecave\\Collections\\Map","Icecave\/Collections\/Map.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["MutableAssociativeInterface::set","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_set","(mixed $key, mixed $value)","Associate a value with a key.",2],["MutableAssociativeInterface::add","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_add","(mixed $key, mixed $value)","Associate a value with a new key.",2],["MutableAssociativeInterface::tryAdd","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_tryAdd","(mixed $key, mixed $value)","Associate a value with a new key.",2],["MutableAssociativeInterface::replace","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_replace","(mixed $key, mixed $value)","Associate a new value with an existing key.",2],["MutableAssociativeInterface::tryReplace","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_tryReplace","(mixed $key, mixed $value, mixed $previous = null)","Associate a new value with an existing key.",2],["MutableAssociativeInterface::remove","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_remove","(mixed $key)","Remove an element from the collection.",2],["MutableAssociativeInterface::tryRemove","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_tryRemove","(mixed $key, mixed $value = null)","Remove an element from the collection.",2],["MutableAssociativeInterface::mergeInPlace","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_mergeInPlace","(<a href=\"Icecave\/Collections\/AssociativeInterface.html\"><abbr title=\"Icecave\\Collections\\AssociativeInterface\">AssociativeInterface<\/abbr><\/a> $collection)","Add the elements from one or more other collections",2],["MutableAssociativeInterface::swap","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_swap","(mixed $key1, mixed $key2)","Swap the elements associated with two keys.",2],["MutableAssociativeInterface::trySwap","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_trySwap","(mixed $key1, mixed $key2)","Swap the elements associated with two keys.",2],["MutableAssociativeInterface::move","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_move","(mixed $source, mixed $target)","Move an element from one key to another, replacing",2],["MutableAssociativeInterface::tryMove","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_tryMove","(mixed $source, mixed $target)","Move an element from one key to another, replacing",2],["MutableAssociativeInterface::rename","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_rename","(mixed $source, mixed $target)","Move an element from one key to another.",2],["MutableAssociativeInterface::tryRename","Icecave\\Collections\\MutableAssociativeInterface","Icecave\/Collections\/MutableAssociativeInterface.html#method_tryRename","(mixed $source, mixed $target)","Move an element from one key to another.",2],["MutableCollectionInterface::clear","Icecave\\Collections\\MutableCollectionInterface","Icecave\/Collections\/MutableCollectionInterface.html#method_clear","()","Remove all elements from the collection.",2],["MutableIterableInterface::filterInPlace","Icecave\\Collections\\MutableIterableInterface","Icecave\/Collections\/MutableIterableInterface.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["MutableIterableInterface::mapInPlace","Icecave\\Collections\\MutableIterableInterface","Icecave\/Collections\/MutableIterableInterface.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["MutableRandomAccessInterface::set","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_set","(integer $index, mixed $element)","Replace the element at a particular position in the",2],["MutableRandomAccessInterface::insert","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_insert","(integer $index, mixed $element)","Insert an element at a particular index.",2],["MutableRandomAccessInterface::insertMany","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_insertMany","(integer $index, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Insert all elements from another collection at a particular",2],["MutableRandomAccessInterface::insertRange","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_insertRange","($index, <a href=\"Icecave\/Collections\/RandomAccessInterface.html\"><abbr title=\"Icecave\\Collections\\RandomAccessInterface\">RandomAccessInterface<\/abbr><\/a> $elements, $begin, $end = null)","Insert a sub-range of another collection at a particular",2],["MutableRandomAccessInterface::remove","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_remove","(integer $index)","Remove the element at a given index.",2],["MutableRandomAccessInterface::removeMany","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_removeMany","(integer $index, integer|null $count = null)","Remove a range of elements at a given index.",2],["MutableRandomAccessInterface::removeRange","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_removeRange","(integer $begin, integer $end)","Remove a range of elements between two indices.",2],["MutableRandomAccessInterface::replace","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_replace","(integer $index, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements, integer|null $count = null)","Replace a range of elements with a second set of elements.",2],["MutableRandomAccessInterface::replaceRange","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_replaceRange","(integer $begin, integer $end, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Replace a range of elements with a second set of elements.",2],["MutableRandomAccessInterface::swap","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_swap","(integer $index1, integer $index2)","Swap the elements at two index positions.",2],["MutableRandomAccessInterface::trySwap","Icecave\\Collections\\MutableRandomAccessInterface","Icecave\/Collections\/MutableRandomAccessInterface.html#method_trySwap","(integer $index1, integer $index2)","Swap the elements at two index positions.",2],["MutableSequenceInterface::sortInPlace","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_sortInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","Sort this sequence in-place.",2],["MutableSequenceInterface::reverseInPlace","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_reverseInPlace","()","Reverse this sequence in-place.",2],["MutableSequenceInterface::append","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_append","($sequence)","Appending elements in the given sequence to this sequence.",2],["MutableSequenceInterface::pushFront","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_pushFront","(mixed $element)","Add a new element to the front of the sequence.",2],["MutableSequenceInterface::popFront","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_popFront","()","Remove and return the element at the front of the sequence.",2],["MutableSequenceInterface::tryPopFront","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_tryPopFront","(mixed $element = null)","Remove the element at the front of the sequence.",2],["MutableSequenceInterface::pushBack","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_pushBack","(mixed $element)","Add a new element to the back of the sequence.",2],["MutableSequenceInterface::popBack","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_popBack","()","Remove and return the element at the back of the sequence.",2],["MutableSequenceInterface::tryPopBack","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_tryPopBack","(mixed $element = null)","Remove the element at the back of the sequence.",2],["MutableSequenceInterface::resize","Icecave\\Collections\\MutableSequenceInterface","Icecave\/Collections\/MutableSequenceInterface.html#method_resize","(integer $size, mixed $element = null)","Resize the sequence.",2],["PriorityQueue::__construct","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method___construct","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $prioritizer, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null)","",2],["PriorityQueue::__toString","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method___toString","()","Fetch a string representation of the collection.",2],["PriorityQueue::clear","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_clear","()","Remove all elements from the collection.",2],["PriorityQueue::next","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_next","()","Fetch the element at the front of the queue.",2],["PriorityQueue::push","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_push","(mixed $element, integer|null $priority = null)","Add a new element to the end of the queue.",2],["PriorityQueue::pop","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_pop","()","Remove and return the element at the front of the queue.",2],["PriorityQueue::serialize","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_serialize","()","Serialize the collection.",2],["PriorityQueue::unserialize","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["PriorityQueue::canCompare","Icecave\\Collections\\PriorityQueue","Icecave\/Collections\/PriorityQueue.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["Queue::__construct","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null)","",2],["Queue::__clone","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method___clone","()","",2],["Queue::size","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_size","()","Fetch the number of elements in the collection.",2],["Queue::isEmpty","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isEmpty","()","Check if the collection is empty.",2],["Queue::__toString","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method___toString","()","Fetch a string representation of the collection.",2],["Queue::clear","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_clear","()","Remove all elements from the collection.",2],["Queue::next","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_next","()","Fetch the element at the front of the queue.",2],["Queue::tryNext","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_tryNext","(mixed $element)","Fetch the element at the front of the queue.",2],["Queue::push","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_push","(mixed $element)","Add a new element to the end of the queue.",2],["Queue::pop","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_pop","()","Remove and return the element at the front of the queue.",2],["Queue::tryPop","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_tryPop","(mixed $element = null)","Remove the element at the front of the queue.",2],["Queue::count","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_count","()","",2],["Queue::serialize","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_serialize","()","Serialize the collection.",2],["Queue::unserialize","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["Queue::compare","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["Queue::canCompare","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["Queue::isEqualTo","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isEqualTo","(mixed $value)","",2],["Queue::isNotEqualTo","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isNotEqualTo","(mixed $value)","",2],["Queue::isLessThan","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isLessThan","(mixed $value)","",2],["Queue::isGreaterThan","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isGreaterThan","(mixed $value)","",2],["Queue::isLessThanOrEqualTo","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["Queue::isGreaterThanOrEqualTo","Icecave\\Collections\\Queue","Icecave\/Collections\/Queue.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["QueuedAccessInterface::next","Icecave\\Collections\\QueuedAccessInterface","Icecave\/Collections\/QueuedAccessInterface.html#method_next","()","Fetch the element next to be returned by pop(), without",2],["QueuedAccessInterface::tryNext","Icecave\\Collections\\QueuedAccessInterface","Icecave\/Collections\/QueuedAccessInterface.html#method_tryNext","(mixed $element)","Fetch the element next to be returned by pop(), without",2],["QueuedAccessInterface::push","Icecave\\Collections\\QueuedAccessInterface","Icecave\/Collections\/QueuedAccessInterface.html#method_push","(mixed $element)","Add a new element.",2],["QueuedAccessInterface::pop","Icecave\\Collections\\QueuedAccessInterface","Icecave\/Collections\/QueuedAccessInterface.html#method_pop","()","Remove and return the next element.",2],["QueuedAccessInterface::tryPop","Icecave\\Collections\\QueuedAccessInterface","Icecave\/Collections\/QueuedAccessInterface.html#method_tryPop","(mixed $element = null)","Remove the next element.",2],["RandomAccessInterface::get","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_get","(mixed $index)","Fetch the element at the given index.",2],["RandomAccessInterface::slice","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_slice","(integer $index, integer|null $count = null)","Extract a range of elements.",2],["RandomAccessInterface::range","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_range","(integer $begin, integer $end)","Extract a range of elements.",2],["RandomAccessInterface::indexOf","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_indexOf","(mixed $element, integer $begin, integer|null $end = null)","Find the index of the first instance of a particular",2],["RandomAccessInterface::indexOfLast","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_indexOfLast","(mixed $element, integer $begin, integer|null $end = null)","Find the index of the last instance of a particular",2],["RandomAccessInterface::find","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_find","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate, integer $begin, integer|null $end = null)","Find the index of the first instance of an element",2],["RandomAccessInterface::findLast","Icecave\\Collections\\RandomAccessInterface","Icecave\/Collections\/RandomAccessInterface.html#method_findLast","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate, integer $begin, integer|null $end = null)","Find the index of the last instance of an element matching",2],["SequenceInterface::front","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_front","()","Fetch the first element in the sequence.",2],["SequenceInterface::tryFront","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_tryFront","(mixed $element)","Fetch the first element in the sequence.",2],["SequenceInterface::back","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_back","()","Fetch the last element in the sequence.",2],["SequenceInterface::tryBack","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_tryBack","(mixed $element)","Fetch the last element in the sequence.",2],["SequenceInterface::sort","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_sort","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","Create a new sequence with the elements from this sequence",2],["SequenceInterface::reverse","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_reverse","()","Create a new sequence with the elements from this sequence",2],["SequenceInterface::join","Icecave\\Collections\\SequenceInterface","Icecave\/Collections\/SequenceInterface.html#method_join","($sequence)","Create a new sequence by appending the elements in",2],["Set::__construct","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null, <abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","",2],["Set::__clone","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method___clone","()","",2],["Set::size","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_size","()","Fetch the number of elements in the collection.",2],["Set::isEmpty","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isEmpty","()","Check if the collection is empty.",2],["Set::__toString","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method___toString","()","Fetch a string representation of the collection.",2],["Set::clear","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_clear","()","Remove all elements from the collection.",2],["Set::iteratorTraits","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["Set::elements","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_elements","()","Fetch a native array containing the elements in the",2],["Set::contains","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_contains","(mixed $element)","Check if the collection contains an element with the",2],["Set::filter","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["Set::map","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["Set::partition","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["Set::each","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["Set::all","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Set::any","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Set::filterInPlace","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["Set::mapInPlace","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["Set::count","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_count","()","",2],["Set::getIterator","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_getIterator","()","",2],["Set::serialize","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_serialize","()","Serialize the collection.",2],["Set::unserialize","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["Set::cascade","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_cascade","($element)","Return the first of the given elements that is contained",2],["Set::cascadeWithDefault","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_cascadeWithDefault","($default, $element)","Return the first of the given elements that is contained",2],["Set::cascadeIterable","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_cascadeIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Return the first of the given elements that is contained",2],["Set::cascadeIterableWithDefault","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_cascadeIterableWithDefault","(mixed $default, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Return the first of the given elements that is contained",2],["Set::add","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_add","(mixed $element)","Add an element to the set.",2],["Set::addMany","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_addMany","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Add multiple elements to the set.",2],["Set::remove","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_remove","(mixed $element)","Remove an element from the set, if it exists.",2],["Set::removeMany","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_removeMany","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Remove multiple elements from the set.",2],["Set::isEqualSet","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isEqualSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is equal to another.",2],["Set::isSuperSet","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isSuperSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a superset of another.",2],["Set::isSubSet","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isSubSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a subset of another.",2],["Set::isProperSuperSet","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isProperSuperSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a proper superset of another.",2],["Set::isProperSubSet","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isProperSubSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a proper subset of another.",2],["Set::isIntersecting","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isIntersecting","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is intersecting another.",2],["Set::union","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_union","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the union of this set and another.",2],["Set::unionInPlace","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_unionInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the union of this set and another, in place.",2],["Set::intersect","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_intersect","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the intersection of this set and another.",2],["Set::intersectInPlace","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_intersectInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the intersection of this set and another, in",2],["Set::diff","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_diff","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the difference (or complement) of this set",2],["Set::diffInPlace","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_diffInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the difference (or complement) of this set",2],["Set::symmetricDiff","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_symmetricDiff","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the symmetric difference (or complement) of",2],["Set::symmetricDiffInPlace","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_symmetricDiffInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the symmetric difference (or complement) of",2],["Set::compare","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["Set::canCompare","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["Set::isEqualTo","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isEqualTo","(mixed $value)","",2],["Set::isNotEqualTo","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isNotEqualTo","(mixed $value)","",2],["Set::isLessThan","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isLessThan","(mixed $value)","",2],["Set::isGreaterThan","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isGreaterThan","(mixed $value)","",2],["Set::isLessThanOrEqualTo","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["Set::isGreaterThanOrEqualTo","Icecave\\Collections\\Set","Icecave\/Collections\/Set.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["SetInterface::cascade","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_cascade","($element)","Return the first of the given elements that is contained",2],["SetInterface::cascadeWithDefault","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_cascadeWithDefault","($default, $element)","Return the first of the given elements that is contained",2],["SetInterface::cascadeIterable","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_cascadeIterable","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Return the first of the given elements that is contained",2],["SetInterface::cascadeIterableWithDefault","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_cascadeIterableWithDefault","(mixed $default, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Return the first of the given elements that is contained",2],["SetInterface::add","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_add","(mixed $element)","Add an element to the set.",2],["SetInterface::addMany","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_addMany","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Add multiple elements to the set.",2],["SetInterface::remove","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_remove","(mixed $element)","Remove an element from the set, if it exists.",2],["SetInterface::removeMany","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_removeMany","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Remove multiple elements from the set.",2],["SetInterface::isEqualSet","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_isEqualSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is equal to another.",2],["SetInterface::isSuperSet","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_isSuperSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a superset of another.",2],["SetInterface::isSubSet","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_isSubSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a subset of another.",2],["SetInterface::isProperSuperSet","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_isProperSuperSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a proper superset of another.",2],["SetInterface::isProperSubSet","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_isProperSubSet","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is a proper subset of another.",2],["SetInterface::isIntersecting","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_isIntersecting","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Check if this set is intersecting another.",2],["SetInterface::union","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_union","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the union of this set and another.",2],["SetInterface::unionInPlace","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_unionInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the union of this set and another, in place.",2],["SetInterface::intersect","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_intersect","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the intersection of this set and another.",2],["SetInterface::intersectInPlace","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_intersectInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the intersection of this set and another, in",2],["SetInterface::diff","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_diff","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the difference (or complement) of this set",2],["SetInterface::diffInPlace","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_diffInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the difference (or complement) of this set",2],["SetInterface::symmetricDiff","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_symmetricDiff","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the symmetric difference (or complement) of",2],["SetInterface::symmetricDiffInPlace","Icecave\\Collections\\SetInterface","Icecave\/Collections\/SetInterface.html#method_symmetricDiffInPlace","(<a href=\"Icecave\/Collections\/SetInterface.html\"><abbr title=\"Icecave\\Collections\\SetInterface\">SetInterface<\/abbr><\/a> $set)","Compute the symmetric difference (or complement) of",2],["Stack::__construct","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null)","",2],["Stack::__clone","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method___clone","()","",2],["Stack::size","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_size","()","Fetch the number of elements in the collection.",2],["Stack::isEmpty","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isEmpty","()","Check if the collection is empty.",2],["Stack::__toString","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method___toString","()","Fetch a string representation of the collection.",2],["Stack::clear","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_clear","()","Remove all elements from the collection.",2],["Stack::next","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_next","()","Fetch the element at the top of the stack.",2],["Stack::tryNext","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_tryNext","(mixed $element)","Fetch the element at the top of the stack.",2],["Stack::push","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_push","(mixed $element)","Add a new element to the end of the stack.",2],["Stack::pop","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_pop","()","Remove and return the element at the top of the stack.",2],["Stack::tryPop","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_tryPop","(mixed $element = null)","Remove the element at the top of the stack.",2],["Stack::count","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_count","()","",2],["Stack::serialize","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_serialize","()","Serialize the collection.",2],["Stack::unserialize","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["Stack::compare","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["Stack::canCompare","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["Stack::isEqualTo","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isEqualTo","(mixed $value)","",2],["Stack::isNotEqualTo","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isNotEqualTo","(mixed $value)","",2],["Stack::isLessThan","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isLessThan","(mixed $value)","",2],["Stack::isGreaterThan","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isGreaterThan","(mixed $value)","",2],["Stack::isLessThanOrEqualTo","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["Stack::isGreaterThanOrEqualTo","Icecave\\Collections\\Stack","Icecave\/Collections\/Stack.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["AssociativeKeyGenerator::__construct","Icecave\\Collections\\Utility\\AssociativeKeyGenerator","Icecave\/Collections\/Utility\/AssociativeKeyGenerator.html#method___construct","(<abbr title=\"Icecave\\Collections\\Utility\\callable\">callable<\/abbr> $arrayHashFunction = &#039;md5&#039;, <abbr title=\"Icecave\\Collections\\Utility\\callable\">callable<\/abbr> $objectHashFunction = &#039;spl_object_hash&#039;)","",2],["AssociativeKeyGenerator::__invoke","Icecave\\Collections\\Utility\\AssociativeKeyGenerator","Icecave\/Collections\/Utility\/AssociativeKeyGenerator.html#method___invoke","(mixed $value)","Generate a suitable key value for use in a PHP array.",2],["AssociativeKeyGenerator::generate","Icecave\\Collections\\Utility\\AssociativeKeyGenerator","Icecave\/Collections\/Utility\/AssociativeKeyGenerator.html#method_generate","(mixed $value)","Generate a suitable key value for use in a PHP array.",2],["ObjectIdentityComparator::__invoke","Icecave\\Collections\\Utility\\ObjectIdentityComparator","Icecave\/Collections\/Utility\/ObjectIdentityComparator.html#method___invoke","(mixed $lhs, mixed $rhs)","",2],["Vector::__construct","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method___construct","(<abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr>|null $collection = null)","",2],["Vector::__clone","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method___clone","()","",2],["Vector::size","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_size","()","Fetch the number of elements in the collection.",2],["Vector::isEmpty","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isEmpty","()","Check if the collection is empty.",2],["Vector::__toString","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method___toString","()","Fetch a string representation of the collection.",2],["Vector::clear","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_clear","()","Remove all elements from the collection.",2],["Vector::iteratorTraits","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_iteratorTraits","()","Return traits describing the collection's iteration",2],["Vector::elements","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_elements","()","Fetch a native array containing the elements in the",2],["Vector::contains","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_contains","(mixed $element)","Check if the collection contains an element.",2],["Vector::filter","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_filter","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Fetch a new collection with a subset of the elements",2],["Vector::map","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_map","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Produce a new collection by applying a transformation",2],["Vector::partition","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_partition","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Partitions this collection into two collections according",2],["Vector::each","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_each","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $callback)","Invokes the given callback on every element in the",2],["Vector::all","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_all","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Vector::any","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_any","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate)","Returns true if the given predicate returns true for",2],["Vector::filterInPlace","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_filterInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $predicate = null)","Filter this collection in-place.",2],["Vector::mapInPlace","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_mapInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $transform)","Replace each element in the collection with the result",2],["Vector::front","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_front","()","Fetch the first element in the sequence.",2],["Vector::tryFront","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_tryFront","(mixed $element)","Fetch the first element in the sequence.",2],["Vector::back","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_back","()","Fetch the last element in the sequence.",2],["Vector::tryBack","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_tryBack","(mixed $element)","Fetch the last element in the sequence.",2],["Vector::sort","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_sort","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","Create a new sequence with the elements from this sequence",2],["Vector::reverse","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_reverse","()","Create a new sequence with the elements from this sequence",2],["Vector::join","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_join","($sequence)","Create a new sequence by appending the elements in",2],["Vector::sortInPlace","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_sortInPlace","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr>|null $comparator = null)","Sort this sequence in-place.",2],["Vector::reverseInPlace","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_reverseInPlace","()","Reverse this sequence in-place.",2],["Vector::append","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_append","($sequence)","Appending elements in the given sequence to this sequence.",2],["Vector::pushFront","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_pushFront","(mixed $element)","Add a new element to the front of the sequence.",2],["Vector::popFront","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_popFront","()","Remove and return the element at the front of the sequence.",2],["Vector::tryPopFront","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_tryPopFront","(mixed $element = null)","Remove the element at the front of the sequence.",2],["Vector::pushBack","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_pushBack","(mixed $element)","Add a new element to the back of the sequence.",2],["Vector::popBack","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_popBack","()","Remove and return the element at the back of the sequence.",2],["Vector::tryPopBack","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_tryPopBack","(mixed $element = null)","Remove the element at the back of the sequence.",2],["Vector::resize","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_resize","(integer $size, mixed $element = null)","Resize the sequence.",2],["Vector::get","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_get","(mixed $index)","Fetch the element at the given index.",2],["Vector::slice","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_slice","(integer $index, integer|null $count = null)","Extract a range of elements.",2],["Vector::range","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_range","(integer $begin, integer $end)","Extract a range of elements.",2],["Vector::indexOf","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_indexOf","(mixed $element, integer $begin, integer|null $end = null)","Find the index of the first instance of a particular",2],["Vector::indexOfLast","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_indexOfLast","(mixed $element, integer $begin, integer|null $end = null)","Find the index of the last instance of a particular",2],["Vector::find","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_find","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate, integer $begin, integer|null $end = null)","Find the index of the first instance of an element",2],["Vector::findLast","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_findLast","(<abbr title=\"Icecave\\Collections\\callable\">callable<\/abbr> $predicate, integer $begin, integer|null $end = null)","Find the index of the last instance of an element matching",2],["Vector::set","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_set","(integer $index, mixed $element)","Replace the element at a particular position in the",2],["Vector::insert","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_insert","(integer $index, mixed $element)","Insert an element at a particular index.",2],["Vector::insertMany","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_insertMany","(integer $index, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Insert all elements from another collection at a particular",2],["Vector::insertRange","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_insertRange","($index, <a href=\"Icecave\/Collections\/RandomAccessInterface.html\"><abbr title=\"Icecave\\Collections\\RandomAccessInterface\">RandomAccessInterface<\/abbr><\/a> $elements, $begin, $end = null)","Insert a sub-range of another collection at a particular",2],["Vector::remove","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_remove","(integer $index)","Remove the element at a given index.",2],["Vector::removeMany","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_removeMany","(integer $index, integer|null $count = null)","Remove a range of elements at a given index.",2],["Vector::removeRange","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_removeRange","(integer $begin, integer $end)","Remove a range of elements at a given index.",2],["Vector::replace","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_replace","(integer $index, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements, integer|null $count = null)","Replace a range of elements with a second set of elements.",2],["Vector::replaceRange","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_replaceRange","(integer $begin, integer $end, <abbr title=\"Icecave\\Collections\\mixed&lt;mixed&gt;\">mixed&lt;mixed&gt;<\/abbr> $elements)","Replace a range of elements with a second set of elements.",2],["Vector::swap","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_swap","(integer $index1, integer $index2)","Swap the elements at two index positions.",2],["Vector::trySwap","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_trySwap","(integer $index1, integer $index2)","Swap the elements at two index positions.",2],["Vector::count","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_count","()","",2],["Vector::current","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_current","()","",2],["Vector::key","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_key","()","",2],["Vector::next","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_next","()","",2],["Vector::rewind","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_rewind","()","",2],["Vector::valid","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_valid","()","",2],["Vector::seek","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_seek","(integer $index)","",2],["Vector::offsetExists","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_offsetExists","(mixed $offset)","",2],["Vector::offsetGet","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_offsetGet","(integer $offset)","",2],["Vector::offsetSet","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_offsetSet","(integer|null $offset, mixed $value)","",2],["Vector::offsetUnset","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_offsetUnset","(integer $offset)","",2],["Vector::serialize","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_serialize","()","Serialize the collection.",2],["Vector::unserialize","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_unserialize","(string $packet)","Unserialize collection data.",2],["Vector::compare","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_compare","(mixed $value)","Compare this object with another value, yielding a",2],["Vector::canCompare","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_canCompare","(mixed $value)","Check if $this is able to be compared to another value.",2],["Vector::isEqualTo","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isEqualTo","(mixed $value)","",2],["Vector::isNotEqualTo","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isNotEqualTo","(mixed $value)","",2],["Vector::isLessThan","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isLessThan","(mixed $value)","",2],["Vector::isGreaterThan","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isGreaterThan","(mixed $value)","",2],["Vector::isLessThanOrEqualTo","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isLessThanOrEqualTo","(mixed $value)","",2],["Vector::isGreaterThanOrEqualTo","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_isGreaterThanOrEqualTo","(mixed $value)","",2],["Vector::capacity","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_capacity","()","Fetch the current reserved capacity of the vector.",2],["Vector::reserve","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_reserve","(integer $size)","Reserve enough memory to hold at least $size elements.",2],["Vector::shrink","Icecave\\Collections\\Vector","Icecave\/Collections\/Vector.html#method_shrink","()","Shrink the reserved memory to match the current vector",2]]
    }
}
search_data['index']['longSearchIndex'] = search_data['index']['searchIndex']